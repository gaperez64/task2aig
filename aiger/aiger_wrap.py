# This file was automatically generated by SWIG (http://www.swig.org).
# Version 4.0.1
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
if _swig_python_version_info < (2, 7, 0):
    raise RuntimeError("Python 2.7 or later required")

# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _aiger_wrap
else:
    import _aiger_wrap

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "thisown":
            self.this.own(value)
        elif name == "this":
            set(self, name, value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)


AIGER_VERSION = _aiger_wrap.AIGER_VERSION
aiger_false = _aiger_wrap.aiger_false
aiger_true = _aiger_wrap.aiger_true
aiger_binary_mode = _aiger_wrap.aiger_binary_mode
aiger_ascii_mode = _aiger_wrap.aiger_ascii_mode
aiger_stripped_mode = _aiger_wrap.aiger_stripped_mode
class aiger_and(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    lhs = property(_aiger_wrap.aiger_and_lhs_get, _aiger_wrap.aiger_and_lhs_set)
    rhs0 = property(_aiger_wrap.aiger_and_rhs0_get, _aiger_wrap.aiger_and_rhs0_set)
    rhs1 = property(_aiger_wrap.aiger_and_rhs1_get, _aiger_wrap.aiger_and_rhs1_set)

    def __init__(self):
        _aiger_wrap.aiger_and_swiginit(self, _aiger_wrap.new_aiger_and())
    __swig_destroy__ = _aiger_wrap.delete_aiger_and

# Register aiger_and in _aiger_wrap:
_aiger_wrap.aiger_and_swigregister(aiger_and)

class aiger_symbol(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    lit = property(_aiger_wrap.aiger_symbol_lit_get, _aiger_wrap.aiger_symbol_lit_set)
    next = property(_aiger_wrap.aiger_symbol_next_get, _aiger_wrap.aiger_symbol_next_set)
    reset = property(_aiger_wrap.aiger_symbol_reset_get, _aiger_wrap.aiger_symbol_reset_set)
    size = property(_aiger_wrap.aiger_symbol_size_get, _aiger_wrap.aiger_symbol_size_set)
    lits = property(_aiger_wrap.aiger_symbol_lits_get, _aiger_wrap.aiger_symbol_lits_set)
    name = property(_aiger_wrap.aiger_symbol_name_get, _aiger_wrap.aiger_symbol_name_set)

    def __init__(self):
        _aiger_wrap.aiger_symbol_swiginit(self, _aiger_wrap.new_aiger_symbol())
    __swig_destroy__ = _aiger_wrap.delete_aiger_symbol

# Register aiger_symbol in _aiger_wrap:
_aiger_wrap.aiger_symbol_swigregister(aiger_symbol)

class aiger(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    maxvar = property(_aiger_wrap.aiger_maxvar_get, _aiger_wrap.aiger_maxvar_set)
    num_inputs = property(_aiger_wrap.aiger_num_inputs_get, _aiger_wrap.aiger_num_inputs_set)
    num_latches = property(_aiger_wrap.aiger_num_latches_get, _aiger_wrap.aiger_num_latches_set)
    num_outputs = property(_aiger_wrap.aiger_num_outputs_get, _aiger_wrap.aiger_num_outputs_set)
    num_ands = property(_aiger_wrap.aiger_num_ands_get, _aiger_wrap.aiger_num_ands_set)
    num_bad = property(_aiger_wrap.aiger_num_bad_get, _aiger_wrap.aiger_num_bad_set)
    num_constraints = property(_aiger_wrap.aiger_num_constraints_get, _aiger_wrap.aiger_num_constraints_set)
    num_justice = property(_aiger_wrap.aiger_num_justice_get, _aiger_wrap.aiger_num_justice_set)
    num_fairness = property(_aiger_wrap.aiger_num_fairness_get, _aiger_wrap.aiger_num_fairness_set)
    inputs = property(_aiger_wrap.aiger_inputs_get, _aiger_wrap.aiger_inputs_set)
    latches = property(_aiger_wrap.aiger_latches_get, _aiger_wrap.aiger_latches_set)
    outputs = property(_aiger_wrap.aiger_outputs_get, _aiger_wrap.aiger_outputs_set)
    bad = property(_aiger_wrap.aiger_bad_get, _aiger_wrap.aiger_bad_set)
    constraints = property(_aiger_wrap.aiger_constraints_get, _aiger_wrap.aiger_constraints_set)
    justice = property(_aiger_wrap.aiger_justice_get, _aiger_wrap.aiger_justice_set)
    fairness = property(_aiger_wrap.aiger_fairness_get, _aiger_wrap.aiger_fairness_set)
    ands = property(_aiger_wrap.aiger_ands_get, _aiger_wrap.aiger_ands_set)
    comments = property(_aiger_wrap.aiger_comments_get, _aiger_wrap.aiger_comments_set)

    def __init__(self):
        _aiger_wrap.aiger_swiginit(self, _aiger_wrap.new_aiger())
    __swig_destroy__ = _aiger_wrap.delete_aiger

# Register aiger in _aiger_wrap:
_aiger_wrap.aiger_swigregister(aiger)


def aiger_id():
    return _aiger_wrap.aiger_id()

def aiger_version():
    return _aiger_wrap.aiger_version()

def aiger_init():
    return _aiger_wrap.aiger_init()

def aiger_init_mem(mem_mgr, arg2, arg3):
    return _aiger_wrap.aiger_init_mem(mem_mgr, arg2, arg3)

def aiger_reset(arg1):
    return _aiger_wrap.aiger_reset(arg1)

def aiger_add_input(arg1, lit, arg3):
    return _aiger_wrap.aiger_add_input(arg1, lit, arg3)

def aiger_add_latch(arg1, lit, next, arg4):
    return _aiger_wrap.aiger_add_latch(arg1, lit, next, arg4)

def aiger_add_output(arg1, lit, arg3):
    return _aiger_wrap.aiger_add_output(arg1, lit, arg3)

def aiger_add_bad(arg1, lit, arg3):
    return _aiger_wrap.aiger_add_bad(arg1, lit, arg3)

def aiger_add_constraint(arg1, lit, arg3):
    return _aiger_wrap.aiger_add_constraint(arg1, lit, arg3)

def aiger_add_justice(arg1, size, arg3, arg4):
    return _aiger_wrap.aiger_add_justice(arg1, size, arg3, arg4)

def aiger_add_fairness(arg1, lit, arg3):
    return _aiger_wrap.aiger_add_fairness(arg1, lit, arg3)

def aiger_add_reset(arg1, lit, reset):
    return _aiger_wrap.aiger_add_reset(arg1, lit, reset)

def aiger_add_and(arg1, lhs, rhs0, rhs1):
    return _aiger_wrap.aiger_add_and(arg1, lhs, rhs0, rhs1)

def aiger_add_comment(arg1, comment_line):
    return _aiger_wrap.aiger_add_comment(arg1, comment_line)

def aiger_check(arg1):
    return _aiger_wrap.aiger_check(arg1)

def aiger_write_to_file(arg1, arg2, arg3):
    return _aiger_wrap.aiger_write_to_file(arg1, arg2, arg3)

def aiger_write_to_string(arg1, arg2, str, len):
    return _aiger_wrap.aiger_write_to_string(arg1, arg2, str, len)

def aiger_write_generic(arg1, arg2, state, arg4):
    return _aiger_wrap.aiger_write_generic(arg1, arg2, state, arg4)

def aiger_open_and_write_to_file(arg1, file_name):
    return _aiger_wrap.aiger_open_and_write_to_file(arg1, file_name)

def aiger_is_reencoded(arg1):
    return _aiger_wrap.aiger_is_reencoded(arg1)

def aiger_reencode(arg1):
    return _aiger_wrap.aiger_reencode(arg1)

def aiger_coi(arg1):
    return _aiger_wrap.aiger_coi(arg1)

def aiger_read_from_file(arg1, arg2):
    return _aiger_wrap.aiger_read_from_file(arg1, arg2)

def aiger_read_generic(arg1, state, arg3):
    return _aiger_wrap.aiger_read_generic(arg1, state, arg3)

def aiger_error(arg1):
    return _aiger_wrap.aiger_error(arg1)

def aiger_open_and_read_from_file(arg1, arg2):
    return _aiger_wrap.aiger_open_and_read_from_file(arg1, arg2)

def aiger_write_symbols_to_file(arg1, file):
    return _aiger_wrap.aiger_write_symbols_to_file(arg1, file)

def aiger_write_comments_to_file(arg1, file):
    return _aiger_wrap.aiger_write_comments_to_file(arg1, file)

def aiger_strip_symbols_and_comments(arg1):
    return _aiger_wrap.aiger_strip_symbols_and_comments(arg1)

def aiger_get_symbol(arg1, lit):
    return _aiger_wrap.aiger_get_symbol(arg1, lit)

def aiger_lit2tag(arg1, lit):
    return _aiger_wrap.aiger_lit2tag(arg1, lit)

def aiger_is_input(arg1, lit):
    return _aiger_wrap.aiger_is_input(arg1, lit)

def aiger_is_latch(arg1, lit):
    return _aiger_wrap.aiger_is_latch(arg1, lit)

def aiger_is_and(arg1, lit):
    return _aiger_wrap.aiger_is_and(arg1, lit)

def get_aiger_symbol(s, i):
    return _aiger_wrap.get_aiger_symbol(s, i)


